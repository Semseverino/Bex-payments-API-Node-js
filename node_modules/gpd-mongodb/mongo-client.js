'use strict';

const mongoClient = require('mongodb').MongoClient;

class MongoClient {
  constructor(url, dbName) {
    if (MongoClient.instance) {
      return MongoClient.instance;
    }
    MongoClient.instance = this;

    this._client = null;

    this._url = url;
    this._dbName = dbName;
    this._connected = null;
  }

  async Connect() {
    const options = {
      promiseLibrary: Promise,
      useNewUrlParser: true,
      keepAlive: true,
      keepAliveInitialDelay: 120000,
    };

    const client = await mongoClient.connect(this._url, options);
    try {
      client.on('close', () => {
        // log
        this._connected = false;
      });
      client.on('reconnect', () => {
        // log
        this._connected = true;
      });

      this._client = client;
      this._connected = true;
      // chains
      return this;
    } catch (error) {
      if (!error.name.startsWith('Mongo')) return Promise.reject(error);
      // log
      return new Promise(resolve => setTimeout(resolve, 1000))
        .then(() => this.Connect());
    }
  }

  Db() { return this._client.db(this._dbName); }

  Disconnect() { this._client.close(); }

  async getHealth() {
    return this._connected ? 'up' : 'down';
  }

  async getStats() {
    const stats = await this.Db().stats();
    return stats;
  }
}

module.exports = MongoClient;
